global:
  imagePullSecrets: []

mini-identity-provider:
  issuer: "http://vaas/auth"
  enabled: true
  ingress:
    className: ""
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/x-forwarded-prefix: "/auth"
    hosts:
      - host: vaas
        paths:
          - path: /auth(/|$)(.*)
            pathType: ImplementationSpecific
            service:
              name: provider
              port: 8080
    tls: []

  image:
    repository: ghcr.io/gdatasoftwareag/vaas/mini-identity-provider
    pullPolicy: Always
    tag: 0.1.18

  service:
    type: ClusterIP
    http:
      port: 8080

  networkPolicy:
    enabled: true

  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

cloud:
  hashLookup:
    enabled: true
  allowlistLookup:
    enabled: true

# sentry:
#   dsn: ""
#   environment: ""
#   release: ""
#   maxBreadcrumbs: ""
#   maxQueueItems: ""
#   enableTracing: ""
#   tracesSampleRate: ""

gateway:
  ingress:
    enabled: true
    className: ""
    annotations: {}
    hosts:
      - host: vaas
        paths:
          - path: /ws
            pathType: ImplementationSpecific
            service:
              name: gateway
              port: 9090
      - host: vaas
        paths:
          - path: /
            pathType: ImplementationSpecific
            service:
              name: gateway
              port: 8080
    tls: []

  authentication:
    authority: http://provider:8080/

  nameOverride: ""
  fullnameOverride: "gateway"

  networkPolicy:
    enabled: true

  service:
    type: ClusterIP
    http:
      port: 8080
    ws:
      port: 9090

  metrics:
    enabled: false
    port: 8080
    path: /metrics

  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 20
    targetCPU: 75
    metrics:

  podDisruptionBudget:
    minAvailable: 1

  replicaCount: 1
  revisionHistoryLimit: 1
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 0.5
      memory: 256Mi

  containerSecurityContext:
    enabled: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  image:
    repository: ghcr.io/gdatasoftwareag/vaas/gateway
    pullPolicy: Always
    tag: 1.1.0

  uploadUrl: "http://vaas/upload"

  terminationGracePeriodSeconds: 30

  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  extraEnvVars: []

  # This block is only for G DATA's internal usage.
  usageevents:
    enabled: false
  gdscanUrl: "http://gdscan:8080/scan/body"

gdscan:
  replicaCount: 1
  deploymentStrategy: "RollingUpdate"
  client:
    resources:
      ## we recommend setting an upper limit
      #   limits:
      #     cpu: 2
      #     memory: 2Gi
      requests:
        cpu: 2
        memory: 2Gi
    name: client
    image:
      repository: ghcr.io/gdatasoftwareag/vaas/scanner
      pullPolicy: Always
      tag: 1
    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault
  terminationGracePeriodSeconds: 30

  nameOverride: ""
  fullnameOverride: "gdscan"

  networkPolicy:
    enabled: true

  podAnnotations: {}

  service:
    type: ""
    port: 8080

  metrics:
    servicemonitor:
      enabled: false
      port: 8080
      path: /metrics

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: gdscan.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []

  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 20
    targetCPU: 75
    metrics:

  nodeSelector: {}

  tolerations: []

  affinity: {}

  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    memory: false
    size: 5Gi
    storageClass: ""

  autoUpdate:
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.29
    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault
    enabled: true
    # every hour
    schedule: "0 * * * *"
    networkPolicy:
      enabled: true
      k8sApiPort: 6443

redis:
  enabled: true
  architecture: standalone
  fullnameOverride: redis
  auth:
    enabled: false
  master:
    disableCommands: []
    resources:
      limits:
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi
    persistence:
      enabled: false
    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault
  networkPolicy:
    enabled: true
