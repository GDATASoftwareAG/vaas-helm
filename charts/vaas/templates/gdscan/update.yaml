{{- if .Values.gdscan.autoUpdate.enabled -}}
kind: ServiceAccount
apiVersion: v1
metadata:
  name: update
  namespace: "{{ .Release.Namespace }}"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: update
  namespace: "{{ .Release.Namespace }}"
rules:
  - apiGroups: ["apps", "extensions"]
    resources: ["deployments", "statefulsets"]
    resourceNames: [{{ include "gdscan.fullname" . }}]
    verbs:
      ["get", "patch", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: update
  namespace: "{{ .Release.Namespace }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: update
subjects:
  - kind: ServiceAccount
    name: update
    namespace: "{{ .Release.Namespace }}"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: update
  namespace: "{{ .Release.Namespace }}"
spec:
  startingDeadlineSeconds: 300
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  schedule: "{{ .Values.gdscan.autoUpdate.schedule }}"
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 600
      template:
        metadata:
          {{- with .Values.gdscan.autoUpdate.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
          {{- end }}        
          labels:
            app.kubernetes.io/name: update
            app.kubernetes.io/instance: "{{ .Release.Name }}"
            app.kubernetes.io/namespace: "{{ .Release.Namespace }}"
        spec:
          serviceAccountName: update
          restartPolicy: Never
          {{- with .Values.gdscan.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- include "gdscan.imagePullSecrets" . | nindent 10 }}
          volumes:
            - name: docker
              emptyDir: {}
            {{- range (include "gdscan.imagePullSecrets" . | fromYaml ).imagePullSecrets }}
            - name: {{ .name }}
              secret:
                secretName: {{ .name }}
                items:
                - key: .dockerconfigjson
                  path: {{ .name }}.json
            {{- end }}
          {{- if .Values.gdscan.autoUpdate.podSecurityContext.enabled }}
          securityContext: {{- omit .Values.gdscan.autoUpdate.podSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          containers:
            - name: updater
              image: "{{ .Values.gdscan.autoUpdate.image.registry }}/{{ .Values.gdscan.autoUpdate.image.repository }}:{{ .Values.gdscan.autoUpdate.image.tag }}"
              {{- if .Values.gdscan.autoUpdate.containerSecurityContext.enabled }}
              securityContext: {{- omit .Values.gdscan.autoUpdate.containerSecurityContext "enabled" | toYaml | nindent 16 }}
              {{- end }}                
              command: ["sh", "-c"]
              args:
              - |
                set -xe
{{- if and (.Values.gdscan.persistence.enabled) (eq .Values.gdscan.persistence.accessMode "ReadWriteOnce" ) }}
                RESOURCE="statefulset/{{ include "gdscan.fullname" . }}"
{{- else }}
                RESOURCE="deployment/{{ include "gdscan.fullname" . }}"
{{- end }}
                LATEST=$(/app/get-latest-docker-tag {{ .Values.gdscan.client.image.repository }} {{ .Values.gdscan.client.image.tag }})
                IMAGE="{{ .Values.gdscan.client.image.repository }}:$LATEST"
                echo "Setting image of $RESOURCE to $IMAGE"
                kubectl set image -n {{ .Release.Namespace }} $RESOURCE client=$IMAGE
              volumeMounts:
                - name: docker
                  mountPath: /home/appuser/.docker
                {{- range (include "gdscan.imagePullSecrets" . | fromYaml ).imagePullSecrets }}
                - name: {{ .name }}
                  mountPath: "/home/appuser/.image_pull_secrets/{{ .name}}.json"
                {{- end }}
              resources:
                {{- toYaml .Values.gdscan.autoUpdate.resources | nindent 16 }}                
{{- if .Values.gdscan.autoUpdate.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: "{{ .Release.Name }}-update"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: update
      app.kubernetes.io/namespace: {{ .Release.Namespace }}
  policyTypes:
    - Egress
  ingress: []
  egress:
    - ports:
        - port: {{ .Values.gdscan.autoUpdate.networkPolicy.k8sApiPort }}
        - port: 443
        - port: 53
          protocol: UDP
{{- end }}
{{- end}}
